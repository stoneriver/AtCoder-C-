#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007

template<const long long M> class mint {
private:
	long long x;
public:
	constexpr mint(long long x = 0) :
			x((x % M + M) % M) {
	}
	constexpr long long value() {
		return x;
	}
	constexpr mint operator-() const {
		return mint(-x);
	}
	constexpr mint& operator+=(const mint &a) {
		if ((x += a.x) >= M)
			x -= M;
		return *this;
	}
	constexpr mint& operator-=(const mint &a) {
		if ((x += M - a.x) >= M)
			x -= M;
		return *this;
	}
	constexpr mint& operator*=(const mint &a) {
		(x *= a.x) %= M;
		return *this;
	}
	constexpr mint& operator/=(const mint &a) {
		return (*this) *= a.inv();
	}
	constexpr mint operator+(const mint &a) const {
		mint res(*this);
		return res += a;
	}
	constexpr mint operator-(const mint &a) const {
		mint res(*this);
		return res -= a;
	}
	constexpr mint operator*(const mint &a) const {
		mint res(*this);
		return res *= a;
	}
	constexpr mint operator/(const mint &a) const {
		mint res(*this);
		return res /= a;
	}
	constexpr mint pow(long long t) const {
		if (!t)
			return 1;
		mint a = pow(t >> 1);
		a *= a;
		if (t & 1)
			a *= *this;
		return a;
	}
	constexpr mint inv() const {
		return pow(M - 2);
	}
	constexpr bool operator==(const mint &a) const {
		return x == a.x;
	}
	constexpr bool operator!=(const mint &a) const {
		return x != a.x;
	}

	friend istream& operator>>(istream &in, mint &a) {
		in >> a.x;
		if (a.x < 0)
			a.x += M;
		a.x %= M;
		return in;
	}
	friend ostream& operator<<(ostream &out, const mint &a) {
		out << a.x;
		return out;
	}
};

template<typename T> T combination(int n, int r) {
	T ans = 1;
	for (int i = 0; i < r; i++) {
		ans *= n - i;
	}
	for (int i = 1; i <= r; i++) {
		ans /= i;
	}
	return ans;
}

template<typename T> T ipow(T b, long long e) {
	if (e == 0) {
		return 1;
	} else if (e % 2 == 0) {
		return ipow(b * b, e / 2);
	} else {
		return ipow(b * b, e / 2) * b;
	}
}

int main() {
	int n, a, b;
	cin >> n >> a >> b;
	cout
			<< ipow<mint<MOD>>(2, n) - combination<mint<MOD>>(n, a)
					- combination<mint<MOD>>(n, b) - 1 << endl;
	return 0;
}
